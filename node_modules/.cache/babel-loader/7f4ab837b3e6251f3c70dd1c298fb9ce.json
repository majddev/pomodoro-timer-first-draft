{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MHelo\\\\Thinkful\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Timer.js\";\nimport React, { useState } from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport useInterval from \"../utils/useInterval\";\n\nfunction Timer({\n  isTimerRunning,\n  focusTime,\n  setFocusTime,\n  breakTime,\n  setBreakTime,\n  sessionType,\n  sessionTime = focusTime,\n  setSessionTime,\n  playPause,\n  stopTimer\n}) {\n  useInterval(() => setSessionTime(focu - 1), isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, sessionType === \"Focus\" ? `Focusing for ${minutesToDuration(focusTime)} minutes` : `On Break for ${minutesToDuration(breakTime)} minutes`), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, secondsToDuration(sessionTime), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": 100 - sessionTime / 100 // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: sessionTime / 100\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default Timer;","map":{"version":3,"sources":["C:/Users/MHelo/Thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Timer.js"],"names":["React","useState","minutesToDuration","secondsToDuration","useInterval","Timer","isTimerRunning","focusTime","setFocusTime","breakTime","setBreakTime","sessionType","sessionTime","setSessionTime","playPause","stopTimer","focu","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;AAEA,SAASC,KAAT,CAAe;AACbC,EAAAA,cADa;AAEbC,EAAAA,SAFa;AAGbC,EAAAA,YAHa;AAIbC,EAAAA,SAJa;AAKbC,EAAAA,YALa;AAMbC,EAAAA,WANa;AAObC,EAAAA,WAAW,GAACL,SAPC;AAQbM,EAAAA,cARa;AASbC,EAAAA,SATa;AAUbC,EAAAA;AAVa,CAAf,EAWG;AACDX,EAAAA,WAAW,CACT,MAAMS,cAAc,CAACG,IAAI,GAAG,CAAR,CADX,EAETV,cAAc,GAAG,IAAH,GAAU,IAFf,CAAX;AAKA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,WAAW,KAAK,OAAhB,GACI,gBAAeT,iBAAiB,CAACK,SAAD,CAAY,UADhD,GAEI,gBAAeL,iBAAiB,CAACO,SAAD,CAAY,UAHnD,CAFF,eAQE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,iBAAiB,CAACS,WAAD,CADpB,eARF,CADF,CAFF,eAgBE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEK,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAe,MAAML,WAAW,GAAG,GALrC,CAK0C;AAL1C;AAME,IAAA,KAAK,EAAE;AAAEM,MAAAA,KAAK,EAAEN,WAAW,GAAG;AAAvB,KANT,CAMuC;AANvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAhBF,CADF;AAiCD;;AAED,eAAeP,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\nimport useInterval from \"../utils/useInterval\";\r\n\r\nfunction Timer({\r\n  isTimerRunning,\r\n  focusTime,\r\n  setFocusTime,\r\n  breakTime,\r\n  setBreakTime,\r\n  sessionType,\r\n  sessionTime=focusTime,\r\n  setSessionTime,\r\n  playPause,\r\n  stopTimer,\r\n}) {\r\n  useInterval(\r\n    () => setSessionTime(focu - 1),\r\n    isTimerRunning ? 1000 : null\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {/* TODO: This area should show only when a focus or break session is running or pauses */}\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n          <h2 data-testid=\"session-title\">\r\n            {sessionType === \"Focus\"\r\n              ? `Focusing for ${minutesToDuration(focusTime)} minutes`\r\n              : `On Break for ${minutesToDuration(breakTime)} minutes`}\r\n          </h2>\r\n          {/* TODO: Update message below to include time remaining in the current session */}\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(sessionTime)} remaining\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow={100 - sessionTime / 100} // TODO: Increase aria-valuenow as elapsed time increases\r\n              style={{ width: sessionTime / 100 }} // TODO: Increase width % as elapsed time increases\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}